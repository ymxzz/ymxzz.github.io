[{"title":"base64图片插入","date":"2023-06-23T04:37:33.000Z","path":"2023/06/23/base64图片插入/","text":"概述Base64 是一种基于 64 个可打印字符来表示二进制数据的表示方法。 Base64 常用于在通常处理文本数据的场合，表示、传输、存储一些二进制数据，包括 MIME 的电子邮件及 XML 的一些复杂数据。 图片的 BASE64 编码就是可以将一幅图片数据编码成一串字符串，使用该字符串代替图片地址，从而不需要使用图片的 URL 地址。 一个图片转base64编码的在线网站：https://c.runoob.com/front-end/59/ 直接插入文本，就不需要建立图床，通过链接引用了。markdown文档插入方式：![image](base64)示例：","link":"","tags":[]},{"title":"SQL刷题笔记","date":"2023-06-11T12:27:38.000Z","path":"2023/06/11/SQL刷题/","text":"超过经理收入的员工 自连接：把一张表 当做多个表使用eg.select …from 表 a（别名）join 表 b（别名） on a.字段&#x3D;b.字段 12select e1.name as Employee from Employee e1,Employee e2 where e1.managerId = e2.id and e1.salary &gt; e2.salary; 查找重复的电子邮箱 https://leetcode.cn/problems/duplicate-emails/有时候，遇到数据库重复数据，需要将数据进行分组，并取出其中一条来展示，这时就需要用到group by语句。having 用于筛选分组后的数据 1select email from Person group by email having count(email) &gt;1; 组合两个表https://leetcode.cn/problems/combine-two-tables/ 1select firstName,lastName,city ,state from Person left join Address on Person.PersonId = Address.PersonId; 从不订购的客户https://leetcode.cn/problems/customers-who-never-order/ 1select Name as Customers from Customers where Id not in (select distinct CustomerId from Orders); 删除重复的电子邮箱https://leetcode.cn/problems/delete-duplicate-emails/ 1delete p1 from Person p1, person p2 where p1.email = p2.email and p1.id&gt;p2.id; 上升的温度https://leetcode.cn/problems/rising-temperature/日期函数：datediff 两个日期的天数差集eg.DATEDIFF(‘2007-12-31’,’2007-12-30’); # 1DATEDIFF(‘2010-12-30’,’2010-12-31’); # -1 123select w1.id from Weather w1,Weather w2 where datediff(w1.recordDate,w2.recordDate)=1 and w1.temperature &gt; w2.temperature; 连续出现的数字https://leetcode.cn/problems/consecutive-numbers/123456789select distinct l1.Num as ConsecutiveNumsfrom Logs l1, Logs l2, Logs L3where# id是否连续l1.id = l2.id-1 and l2.id = l3.id-1 and# Num是否相等l1.Num = l2.Num and l2.Num = l3.Num","link":"","tags":[{"name":"SQL刷题笔记","slug":"SQL刷题笔记","permalink":"http://example.com/tags/SQL%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"}]},{"title":"虚析构函数","date":"2023-06-06T02:56:30.000Z","path":"2023/06/06/虚析构函数/","text":"基类的虚析构函数使得某些情况下释放内存时能调用派生类的析构函数，避免内存泄漏 123456789101112131415161718192021222324252627282930313233#include &lt;iostream&gt;class A&#123;public: A()&#123;std::cout&lt;&lt;&quot;A被创建~&quot;&lt;&lt;std::endl;&#125; //构造函数：实例化对象时被调用的方法 virtual ~A()&#123;std::cout&lt;&lt;&quot;A被销毁~&quot;&lt;&lt;std::endl;&#125; //析构函数：销毁对象（释放内存）时被调用的方法&#125;;class B : public A&#123;public: B()&#123;std::cout&lt;&lt;&quot;B被创建~&quot;&lt;&lt;std::endl;&#125; ~B()&#123;std::cout&lt;&lt;&quot;B被销毁~&quot;&lt;&lt;std::endl;&#125;&#125;;int main()&#123; A* a = new A; delete a; //A被创建~ //A被销毁~ B* b = new B; delete b; //A被创建~ //B被创建~ //B被销毁~ //A被销毁 A* c = new B; delete c; //A被创建~ //B被创建~ //A被销毁~ //只有基类A的的析构函数被调用，派生类B的没有调用，可能造成内存泄漏，所以需要把基类A的析构函数改为虚函数，才会先调用派生类B的析构函数，再调用基类A的 &#125; 12345class A&#123;public: A()&#123;std::cout&lt;&lt;&quot;A被创建~&quot;&lt;&lt;std::endl;&#125; 时被调用的方法 virtual ~A()&#123;std::cout&lt;&lt;&quot;A被销毁~&quot;&lt;&lt;std::endl;&#125; //改为虚析构函数&#125;; 1234567 A* c = new B;delete c; //A被创建~//B被创建~//B被销毁~//A被销毁~","link":"","tags":[{"name":"C++学习","slug":"C-学习","permalink":"http://example.com/tags/C-%E5%AD%A6%E4%B9%A0/"}]},{"title":"C++刷题笔记","date":"2023-06-04T12:33:01.000Z","path":"2023/06/04/C++刷题笔记/","text":"当数组名字作为函数实参传递1234567int foo(char x[10])&#123; return sizeof(x);&#125;int main()&#123; char a[10]; std::cout&lt;&lt; foo(a);&#125; -当数组名字作为函数实参传递时会退化为指针，此处打印指针的大小，32位指针大小为4，64为则为8-打印： 8 (32位的话打印4) C语言的三种基本控制结构（） 无重复字符的最长子串 https://leetcode.cn/problems/longest-substring-without-repeating-characters/给定一个字符串 s ，请你找出其中不含有重复字符的 最长子串 的长度。 1234567891011121314151617181920212223242526272829class Solution &#123;public: int lengthOfLongestSubstring(string s) &#123; int l = 0; int r = 0; int count = 0; int res = 0; if(s.size()== 0) return 0; if(s.size() == 1) return 1; while(s[r+1])&#123; r += 1; //如果l,r指向内容相同，l移动 if (s[r] == s[l])&#123; l+=1; &#125; //遍历l~r间的内容 ,若过程中有元素与r指向内容相同，则l指向下一个内容,&#x27;dvsv&#x27;-&gt;&#x27;sv&#x27; for(int j = l; j &lt; r; j++)&#123; if(s[j] == s[r])&#123; l=j+1; &#125; &#125; count = r-l+1; res = max(res,count); &#125; return res; &#125;&#125;;","link":"","tags":[{"name":"C++刷题笔记","slug":"C-刷题笔记","permalink":"http://example.com/tags/C-%E5%88%B7%E9%A2%98%E7%AC%94%E8%AE%B0/"}]},{"title":"Hello World","date":"2023-06-02T08:05:06.844Z","path":"2023/06/02/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","link":"","tags":[]},{"title":"MySQL学习","date":"2022-06-06T11:42:54.000Z","path":"2022/06/06/MySQL学习/","text":"-数据库：按照数据结构来组织、存储和管理数据的仓库 -SQL (Structured query language结构化查询语言)： 是一门用于访问和处理数据库(如MySQL、SQL Server、Access等)的标准的计算机语言，范围包括数据的增删改查，数据库模式创建和修改，数据访问控制。 MySQL下载：https://dev.mysql.com/downloads/mysql/ 解压文件夹下配置 my.ini 安装配置： https://www.runoob.com/mysql/mysql-install.html 登录： mysql -u root -p mysql版本： mysql&gt; select version(); +-----------+ | version() | +-----------+ | 8.0.33 | +-----------+ 1 row in set (0.00 sec) 修改密码： mysqladmin -u用户名 -p旧密码 password 新密码 mysqladmin -uroot -pE6laBikl.SN4 password 12345 SQL基础语法增INSERT INTO 语句INSERT INTO 语句用于向表中插入新记录。SQL INSERT INTO 语法INSERT INTO 语句可以有两种编写形式。第一种形式无需指定要插入数据的列名，只需提供被插入的值即可： INSERT INTO table_name VALUES (value1,value2,value3,...);第二种形式需要指定列名及被插入的值： INSERT INTO table_name (column1,column2,column3,...) VALUES (value1,value2,value3,...); mysql&gt; insert into mydatabase_tbl values (4,&#39;亿贫如洗&#39;,&#39;王道长&#39;,&#39;2023,06,11&#39;); Query OK, 1 row affected, 1 warning (0.01 sec) mysql&gt; insert into mydatabase_tbl (mydatabase_title,mydatabase_author,submission_date) values (&#39;一念之插&#39;,&#39;张灵玉&#39;,&#39;2023-06-11&#39;); Query OK, 1 row affected (0.00 sec) mysql&gt; select * from mydatabase_tbl; +---------------+------------------+-------------------+-----------------+ | mydatabase_id | mydatabase_title | mydatabase_author | submission_date | +---------------+------------------+-------------------+-----------------+ | 1 | MySQL学习 | YM学渣 | 2023-06-08 | | 2 | 阿威十八式 | 宝儿姐 | 2023-06-10 | | 3 | 不摇碧莲 | 张楚岚 | 2023-06-10 | | 4 | 亿贫如洗 | 王道长 | 2023-06-11 | | 5 | 一念之插 | 张灵玉 | 2023-06-11 | +---------------+------------------+-------------------+-----------------+ 5 rows in set (0.00 sec) 删DELETE 语句DELETE 语句用于删除表中的行。SQL DELETE 语法DELETE FROM table_name WHERE condition; mysql&gt; delete from mydatabase_tbl where mydatabase_id=1; Query OK, 1 row affected (0.00 sec) mysql&gt; select * from mydatabase_tbl; +---------------+------------------+-------------------+-----------------+ | mydatabase_id | mydatabase_title | mydatabase_author | submission_date | +---------------+------------------+-------------------+-----------------+ | 2 | 机智一匹 | 宝儿姐 | 2023-06-10 | | 3 | 不摇碧莲 | 张楚岚 | 2023-06-10 | | 4 | 亿贫如洗 | 王道长 | 2023-06-11 | | 5 | 一念之插 | 张灵玉 | 2023-06-11 | +---------------+------------------+-------------------+-----------------+ 4 rows in set (0.00 sec) 改UPDATE 语句UPDATE 语句用于更新表中已存在的记录。SQL UPDATE 语法UPDATE table_name SET column1 = value1, column2 = value2, ...WHERE condition; mysql&gt; update mydatabase_tbl set mydatabase_title=&#39;机智一匹&#39; where mydatabase_id=2; Query OK, 1 row affected (0.01 sec) Rows matched: 1 Changed: 1 Warnings: 0 mysql&gt; select * from mydatabase_tbl; +---------------+------------------+-------------------+-----------------+ | mydatabase_id | mydatabase_title | mydatabase_author | submission_date | +---------------+------------------+-------------------+-----------------+ | 1 | MySQL学习 | YM学渣 | 2023-06-08 | | 2 | 机智一匹 | 宝儿姐 | 2023-06-10 | | 3 | 不摇碧莲 | 张楚岚 | 2023-06-10 | | 4 | 亿贫如洗 | 王道长 | 2023-06-11 | | 5 | 一念之插 | 张灵玉 | 2023-06-11 | +---------------+------------------+-------------------+-----------------+ 5 rows in set (0.00 sec) 查SELECT语句 (实际对大小写不敏感)SELECT 语句用于从数据库中选取数据。结果被存储在一个结果表中，称为结果集。 SELECT * FROM table_name; mysql&gt; select * from mydatabase_tbl; +---------------+------------------+-------------------+-----------------+ | mydatabase_id | mydatabase_title | mydatabase_author | submission_date | +---------------+------------------+-------------------+-----------------+ | 1 | MySQL学习 | YM学渣 | 2023-06-08 | | 2 | 阿威十八式 | 宝儿姐 | 2023-06-10 | | 3 | 不摇碧莲 | 张楚岚 | 2023-06-10 | +---------------+------------------+-------------------+-----------------+ 3 rows in set (0.00 sec) SELECT column1, column2,FROM table_name; mysql&gt; select submission_date,mydatabase_title from mydatabase_tbl; +-----------------+------------------+ | submission_date | mydatabase_title | +-----------------+------------------+ | 2023-06-08 | MySQL学习 | | 2023-06-10 | 阿威十八式 | | 2023-06-10 | 不摇碧莲 | +-----------------+------------------+ 3 rows in set (0.00 sec) mysql&gt; select submission_date from mydatabase_tbl; +-----------------+ | submission_date | +-----------------+ | 2023-06-08 | | 2023-06-10 | | 2023-06-10 | +-----------------+ 3 rows in set (0.00 sec) SELECT DISTINCT 语法选取不重复的元素 SELECT DISTINCT column1, column2, FROM table_name; mysql&gt; select distinct submission_date from mydatabase_tbl; +-----------------+ | submission_date | +-----------------+ | 2023-06-08 | | 2023-06-10 | +-----------------+ 2 rows in set (0.00 sec) WHERE 子句where用于提取满足条件的数据 SELECT column1, column2, FROM table_name WHERE condition; 多个条件间用与或（and or） mysql&gt; select * from mydatabase_tbl where mydatabase_author = &#39;宝儿姐&#39;; +---------------+------------------+-------------------+-----------------+ | mydatabase_id | mydatabase_title | mydatabase_author | submission_date | +---------------+------------------+-------------------+-----------------+ | 2 | 阿威十八式 | 宝儿姐 | 2023-06-10 | +---------------+------------------+-------------------+-----------------+ 1 row in set (0.00 sec) mysql&gt; select mydatabase_title,mydatabase_author from mydatabase_tbl where mydatabase_id=3; +------------------+-------------------+ | mydatabase_title | mydatabase_author | +------------------+-------------------+ | 不摇碧莲 | 张楚岚 | +------------------+-------------------+ 1 row in set (0.00 sec) SQL ORDER BY 关键字ORDER BY 关键字用于对结果集按照一个列或者多个列进行排序，默认按照升序对记录进行排序。如果需要按照降序对记录进行排序，您可以使用 DESC 关键字。 SELECT column1, column2, FROM table_name ORDER BY column1, column2 ASC|DESC; mysql&gt; select mydatabase_title from mydatabase_tbl order by submission_date desc; +------------------+ | mydatabase_title | +------------------+ | 阿威十八式 | | 不摇碧莲 | | MySQL学习 | +------------------+ 3 rows in set (0.00 sec) 查看数据库中的用户：mysql&gt; select user from user; +------------------+ | user | +------------------+ | mysql.infoschema | | mysql.session | | mysql.sys | | root | +------------------+ 4 rows in set (0.00 sec) 添加用户，用户名为guest，密码为guest123：mysql -u root -p mysql&gt; create user &#39;guest&#39;@&#39;localhost&#39; identified by &#39;guest123&#39;; Query OK, 0 rows affected (0.00 sec) mysql&gt; select user from user; +------------------+ | user | +------------------+ | guest | | mysql.infoschema | | mysql.session | | mysql.sys | | root | +------------------+ 5 rows in set (0.00 sec) 删除guest:mysql&gt; drop user &#39;guest&#39;@&#39;localhost&#39;; Query OK, 0 rows affected (0.00 sec) mysql&gt; select user from user; +------------------+ | user | +------------------+ | mysql.infoschema | | mysql.session | | mysql.sys | | root | +------------------+ 4 rows in set (0.00 sec) 创建数据库：mysql&gt; create database mydatabase; Query OK, 1 row affected (0.00 sec) mysql&gt; show databases; +--------------------+ | Database | +--------------------+ | information_schema | | mydatabase | | mysql | | performance_schema | | sys | +--------------------+ 5 rows in set (0.01 sec) 选择数据库：mysql&gt; use mydatabase; Database changed 删除数据库：mysql&gt; drop database mydatabase; Query OK, 0 rows affected (0.00 sec) mysql&gt; show databases; +--------------------+ | Database | +--------------------+ | information_schema | | mysql | | performance_schema | | sys | +--------------------+ 4 rows in set (0.00 sec) MySQL数据类型：https://www.runoob.com/mysql/mysql-data-types.html 创建数据表：mysql&gt; create table mydatabase_tbl( -&gt; mydatabase_id int not null auto_increment, -&gt; mydatabase_title varchar(100) not null, -&gt; mydatabase_author varchar(40) not null, -&gt; submission_date DATE, -&gt; primary key ( mydatabase_id ) -&gt; )engine=InnoDB default charset=utf8; Query OK, 0 rows affected, 1 warning (0.01 sec) 查看表的结构 mysql&gt; show tables; +----------------------+ | Tables_in_mydatabase | +----------------------+ | mydatabase_tbl | +----------------------+ 1 row in set (0.00 sec) mysql&gt; desc mydatabase_tbl; +-------------------+--------------+------+-----+---------+----------------+ | Field | Type | Null | Key | Default | Extra | +-------------------+--------------+------+-----+---------+----------------+ | mydatabase_id | int | NO | PRI | NULL | auto_increment | | mydatabase_title | varchar(100) | NO | | NULL | | | mydatabase_author | varchar(40) | NO | | NULL | | | submission_date | date | YES | | NULL | | +-------------------+--------------+------+-----+---------+----------------+ 4 rows in set (0.00 sec) LIKE 子句%表示任意字符，类似unix中的*‘%a’ &#x2F;&#x2F;以a结尾的数据‘a%’ &#x2F;&#x2F;以a开头的数据‘%a%’ &#x2F;&#x2F;含有a的数据‘a‘ &#x2F;&#x2F;三位且中间字母是a的‘a’ &#x2F;&#x2F;两位且结尾字母是a的‘a‘ &#x2F;&#x2F;两位且开头字母是a的 SQL SELECT 语句使用 LIKE 子句从数据表中读取数据的通用语法：SELECT field1, field2,...fieldN FROM table_name WHERE field1 LIKE condition1 [AND [OR]] filed2 = &#39;somevalue&#39; mysql&gt; select mydatabase_title,mydatabase_author from mydatabase_tbl where mydatabase_title like &#39;%一%&#39;; +------------------+-------------------+ | mydatabase_title | mydatabase_author | +------------------+-------------------+ | 机智一匹 | 宝儿姐 | | 一念之插 | 张灵玉 | +------------------+-------------------+ 2 rows in set (0.00 sec) 表结构的复制：mysql&gt; create table tb2 like tb1; 表结构的复制同时拷贝数据：mysql&gt; create table tb2 select * from tb1; MySQL UNION 操作符MySQL UNION 操作符用于连接两个以上的 SELECT 语句的结果组合到一个结果集合中。多个 SELECT 语句会删除重复的数据。 SELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions] UNION [ALL | DISTINCT] SELECT expression1, expression2, ... expression_n FROM tables [WHERE conditions]; Python连接mysql$ python3 -m pip install PyMySQL 12345678910111213141516import pymysql# 打开数据库连接db = pymysql.connect(host = &quot;localhost&quot;, user = &quot;root&quot;, password = &quot;12345&quot;, database = &#x27;mydatabase&#x27;)# 使用 cursor() 方法创建一个游标对象 cursorcursor = db.cursor()# 使用 execute() 方法执行 SQL 查询 cursor.execute(&quot;select * from mydatabase_tbl&quot;)# 使用 fetchone() 方法获取单条数据.data = cursor.fetchone()print(f&quot;Database_vision:&#123;data&#125;&quot;)# 关闭数据库连接db.close()","link":"","tags":[{"name":"mysql","slug":"mysql","permalink":"http://example.com/tags/mysql/"}]},{"title":"C++ 联合体","date":"2022-06-05T02:56:17.000Z","path":"2022/06/05/Union/","text":"处理相同的数据 12345678910111213141516171819202122232425262728293031323334353637#include &lt;iostream&gt;struct vector1&#123; float x,y;&#125;;struct vector2&#123; union&#123; //匿名union //成员间对应变量共用相同内存 struct&#123; //成员1 float x,y,z,w; &#125;; struct&#123; //成员2 vector1 a,b; &#125;; &#125;; &#125;;int main()&#123; union U&#123; int a[10]; int b; &#125;; U u; std::cout&lt;&lt;&amp;u.b&lt;&lt;std::endl; //0x7f08bffb60 std::cout&lt;&lt;u.a&lt;&lt;std::endl; //0x7f08bffb60 共用相同内存 vector2 v = &#123;1.1f, 2.2f, 3.3f, 4.4f&#125;; std::cout&lt;&lt;v.a.x; //1.1 std::cout&lt;&lt;v.a.y; //2.2 std::cout&lt;&lt;v.b.x; //3.3 std::cout&lt;&lt;v.b.y; //4.4 &#125;","link":"","tags":[{"name":"C++学习","slug":"C-学习","permalink":"http://example.com/tags/C-%E5%AD%A6%E4%B9%A0/"}]},{"title":"java配置","date":"2021-06-06T09:13:35.000Z","path":"2021/06/06/java配置/","text":"jdk下载：https://www.oracle.com/ 1234&gt;&gt;java -versionjava version &quot;20.0.1&quot; 2023-04-18Java(TM) SE Runtime Environment (build 20.0.1+9-29)Java HotSpot(TM) 64-Bit Server VM (build 20.0.1+9-29, mixed mode, sharing) hello_world.java 12345public class hello_world&#123; public static void main(String[] args)&#123; System.out.println(&quot;Hello world!&quot;); &#125;&#125; javac jdk提供的编译工具进行编译javac hello_world.java 123456λ tree/f 卷 软件 的文件夹 PATH 列表 卷序列号为 0503-CB42 D:. hello_world.class hello_world.java java运行java hello_world Hello world!","link":"","tags":[{"name":"java学习","slug":"java学习","permalink":"http://example.com/tags/java%E5%AD%A6%E4%B9%A0/"}]},{"title":"hexo搭建博客笔记","date":"2021-05-07T06:48:23.000Z","path":"2021/05/07/hexo搭建博客笔记/","text":"下载安装Git，nodeJS 下载安装Git，nodeJS 之后使用blog目录下Git Bash进行操作 _config.yml配置(配置后才能部署到自己的GitHub仓库)1234deploy: type: git repo: https://github.com/xxxx/xxxx.github.io.git branch: master 安装指令-安装hexo框架npm install hexo-cli -g-初始化博客hexo init myblog-安装主题，到init生成的myblog根目录下 git clone theme-url themes/theme-name写新文章hexo new &quot;文章&quot;安装部署插件npm install hexo-deployer-git --save部署到github,部署前需要注册GitHub账号，新建一个仓库清除了之前生成的东西hexo clean生成静态文章，缩写hexo ghexo generate启动服务本地预览，缩写hexo shexo server部署文章,缩写hexo dhexo deployer使用yilia-plus主题：https://zhousiwei.gitee.io/yilia-plus-demo/2019/08/01/hexo%E4%B8%BB%E9%A2%98%E4%B9%8Bhexo-theme-yilia-plus/参考网址https://blog.csdn.net/sinat_37781304/article/details/82729029yilia-plus主题：https://gitee.com/nate-lin/yilia-plus/","link":"","tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"软件分享","date":"2021-05-07T06:48:23.000Z","path":"2021/05/07/动画绘画软件分享/","text":"软件分享： 2d动画绘画软件分享：链接： https://pan.baidu.com/s/1_upZ4siX2Lr160zjW5A_Yg 提取码：mymk","link":"","tags":[]},{"title":"记录每日好心情","date":"2021-05-07T06:48:23.000Z","path":"2021/05/07/随笔/","text":"随笔 写下每日的心情不知道干什么，先随便找点东西学着！","link":"","tags":[{"name":"随笔","slug":"随笔","permalink":"http://example.com/tags/%E9%9A%8F%E7%AC%94/"}]}]